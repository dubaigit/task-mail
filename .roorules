# Apple Mail Dashboard .roorules Configuration
# Best practices compilation from multiple sources and tailored for this project

## Project Context & Architecture
This is an Apple Mail dashboard application with:
- React TypeScript frontend with modern UI components
- Python backend services with FastAPI/Flask
- Email synchronization and processing capabilities
- Task-centric interface for email management
- Vector database integration (Qdrant) for intelligent features

## Development Workflow & Methodology

### Follow Agile Development Principles
- Break down tasks into small, manageable increments
- Implement features iteratively with testing at each step
- Use Test-Driven Development (TDD) where appropriate
- Maintain continuous integration practices
- Document decisions and changes in implementation_plan.md and TODO.md

### Five-Phase Development Approach
For any development task, follow this systematic workflow:

1. **Requirements & Clarifications**
   - Make requirements clear and verbose upfront
   - Ask clarifying questions to avoid rework
   - Identify potential bottlenecks early
   - Document assumptions in code comments

2. **Exhaustive Search & Optimal Planning**
   - Research multiple solution approaches
   - Choose optimal solutions with clear reasoning
   - Consider scalability and maintainability
   - Plan for error handling and edge cases

3. **User Validation** 
   - Present proposed solutions clearly
   - Explain design decisions and trade-offs
   - Confirm understanding before implementation
   - Update documentation accordingly

4. **Incremental Implementation**
   - Implement one feature at a time
   - Test thoroughly after each implementation
   - Build upon working foundations
   - Maintain backward compatibility when possible

5. **Optimization & Enhancement**
   - Suggest performance improvements
   - Recommend security enhancements
   - Propose additional functionality
   - Document lessons learned

## File Structure & Organization

### Project Structure Best Practices
```
apple-mail-dashboard/
├── dashboard/frontend/          # React TypeScript frontend
│   ├── src/
│   │   ├── components/         # Reusable UI components
│   │   ├── pages/             # Page components
│   │   ├── hooks/             # Custom React hooks
│   │   ├── utils/             # Utility functions
│   │   ├── types/             # TypeScript type definitions
│   │   └── tests/             # Frontend tests
├── services/                   # Python backend services
├── tests/                     # Backend tests
├── config/                    # Configuration files
├── docs/                      # Documentation
└── scripts/                   # Utility scripts
```

### Naming Conventions
- **Components**: PascalCase (e.g., `TaskCentricDashboard.tsx`)
- **Files**: kebab-case for regular files (e.g., `email-utils.ts`)
- **Directories**: lowercase with hyphens (e.g., `task-centric/`)
- **Variables/Functions**: camelCase (e.g., `emailSyncService`)
- **Constants**: SCREAMING_SNAKE_CASE (e.g., `API_BASE_URL`)
- **Types/Interfaces**: PascalCase with descriptive names (e.g., `EmailMessage`, `TaskItem`)

## Code Quality & Standards

### TypeScript Best Practices
- Always use explicit types for function parameters and return values
- Use interfaces for object shapes, types for unions and primitives
- Leverage TypeScript utility types (Pick, Omit, Partial, etc.)
- Use strict TypeScript configuration
- Avoid `any` type - use `unknown` for truly dynamic content
- Use type guards for runtime type checking

### React Best Practices
- Use functional components with hooks
- Extract complex logic into custom hooks
- Use React.memo for performance optimization where needed
- Implement proper error boundaries
- Use Suspense for async components
- Follow the single responsibility principle for components
- Use proper key props for lists
- Handle loading and error states gracefully

### Python Best Practices
- Follow PEP 8 style guide
- Use type hints for all function parameters and return values
- Use dataclasses or Pydantic models for structured data
- Implement proper error handling with custom exceptions
- Use async/await for I/O operations
- Write comprehensive docstrings
- Use context managers for resource management

### Email Processing Specific Guidelines
- Always validate email data before processing
- Implement proper rate limiting for email API calls
- Use batch processing for large email operations
- Implement retry logic with exponential backoff
- Sanitize email content for security
- Handle different email encodings properly
- Cache frequently accessed email data

## Testing Strategy

### Frontend Testing
- Unit tests for utility functions and custom hooks
- Component tests for UI components using React Testing Library
- Integration tests for complex user workflows
- E2E tests for critical user paths using Playwright
- Accessibility tests for all interactive components
- Performance tests for large email lists

### Backend Testing
- Unit tests for all service functions
- Integration tests for email synchronization
- API endpoint tests with various scenarios
- Database operation tests
- Mock external email APIs for consistent testing
- Performance tests for bulk operations

### Test Organization
- Co-locate tests with the code they test
- Use descriptive test names that explain the scenario
- Test both happy path and error conditions
- Use proper test data fixtures
- Mock external dependencies consistently
- Maintain test coverage above 80%

## Security Guidelines

### Email Data Security
- Never log sensitive email content
- Encrypt email data at rest in the vector database
- Use secure authentication for email API access
- Implement proper session management
- Sanitize all email content before display
- Use HTTPS for all API communications
- Implement rate limiting to prevent abuse

### Code Security
- Validate all input data
- Use parameterized queries for database operations
- Keep dependencies updated
- Use environment variables for sensitive configuration
- Implement proper CORS policies
- Use CSP headers for XSS protection

## Performance Optimization

### Frontend Performance
- Implement virtual scrolling for large email lists
- Use React.lazy for code splitting
- Optimize bundle size with tree shaking
- Use proper image optimization
- Implement caching strategies for email data
- Use debouncing for search inputs
- Minimize re-renders with proper memoization

### Backend Performance
- Use async programming for I/O operations
- Implement proper caching layers
- Use connection pooling for databases
- Optimize vector database queries
- Implement pagination for large datasets
- Use background tasks for heavy operations
- Monitor and profile performance regularly

## Documentation Standards

### Code Documentation
- Write clear, concise comments explaining the "why", not the "what"
- Use JSDoc for JavaScript/TypeScript functions
- Use docstrings for Python functions
- Document complex algorithms and business logic
- Keep README files updated with setup instructions
- Document API endpoints with examples
- Maintain architecture decision records (ADRs)

### Component Documentation
- Document component props with descriptions
- Provide usage examples for complex components
- Document accessibility features
- Include performance considerations
- Document known limitations or considerations

## Error Handling

### Frontend Error Handling
- Implement global error boundary
- Show user-friendly error messages
- Log errors to monitoring service
- Provide fallback UI for failed components
- Handle network errors gracefully
- Implement retry mechanisms for failed operations

### Backend Error Handling
- Use custom exception classes
- Return consistent error response format
- Log errors with appropriate detail level
- Implement circuit breaker pattern for external APIs
- Use proper HTTP status codes
- Provide helpful error messages for debugging

## Integration Guidelines

### Email Service Integration
- Use official email provider SDKs where possible
- Implement proper OAuth2 flow for authentication
- Handle API rate limits gracefully
- Cache authentication tokens securely
- Monitor API usage and costs
- Implement fallback strategies for service outages

### Vector Database Integration
- Use appropriate vector dimensions for email embeddings
- Implement proper indexing strategies
- Monitor query performance
- Use batch operations for bulk updates
- Implement data migration strategies
- Back up vector data regularly

## Maintenance & Monitoring

### Code Maintenance
- Regularly update dependencies
- Remove unused code and dependencies
- Refactor code to improve readability
- Monitor and fix technical debt
- Use linting tools consistently
- Implement pre-commit hooks

### System Monitoring
- Monitor application performance metrics
- Track email synchronization success rates
- Monitor vector database performance
- Set up alerting for critical failures
- Track user engagement metrics
- Monitor resource usage and scaling needs

## Accessibility Standards

- Use semantic HTML elements
- Provide proper ARIA labels
- Ensure keyboard navigation works
- Maintain proper color contrast
- Support screen readers
- Test with accessibility tools
- Follow WCAG 2.1 guidelines

## Version Control & Git Practices

- Use conventional commit messages
- Create feature branches for new development
- Use pull requests for code review
- Keep commits atomic and focused
- Write descriptive branch names
- Tag releases appropriately
- Maintain a clean commit history

## Environment & Configuration Management

- Use environment variables for configuration
- Separate configurations for different environments
- Never commit secrets to version control
- Use configuration validation
- Document all configuration options
- Implement configuration hot-reloading where appropriate

## API Design Guidelines

### REST API Standards
- Use proper HTTP methods and status codes
- Implement consistent request/response formats
- Use proper URL structure and naming
- Implement API versioning
- Provide comprehensive API documentation
- Use proper authentication and authorization
- Implement rate limiting and throttling

### Email API Integration
- Handle different email providers consistently
- Implement proper error mapping from provider APIs
- Use webhook handlers for real-time updates
- Implement idempotent operations
- Handle large attachments properly
- Support email threading and conversation grouping

Remember: These rules serve as guidelines to ensure consistent, maintainable, and high-quality code. Always consider the specific context and requirements of each task when applying these practices.