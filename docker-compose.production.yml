version: '3.8'

# Production Docker Compose Configuration
# Optimized for production workloads with monitoring, security, and reliability

services:
  # ============================================================================
  # INFRASTRUCTURE SERVICES
  # ============================================================================
  
  # Redis - High-performance caching and message queuing
  redis:
    image: redis:7.2-alpine
    container_name: email-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
      --save 900 1 300 10 60 10000
      --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-prod-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - email-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB - Document storage for email data
  mongodb:
    image: mongo:7.0
    container_name: email-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-emailpass123}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-emaildb}
    command: >
      mongod 
      --auth
      --bind_ip_all
      --oplogSize 100
      --replSet rs0
      --journal
      --wiredTigerCacheSizeGB 0.5
    volumes:
      - mongo-prod-data:/data/db
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./config/mongod.conf:/etc/mongod.conf:ro
    networks:
      - email-network-prod
    healthcheck:
      test: |
        echo 'db.runCommand("ping").ok' | mongosh localhost:27017/emaildb --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB Express - Web interface (optional, disable in production)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: email-mongo-express-prod
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD:-emailpass123}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-emailpass123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS:-secure123}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - email-network-prod
    profiles:
      - debug
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================
  
  # Email Intelligence Backend - Main API service
  email-backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      args:
        - PYTHON_VERSION=3.11
        - DEBIAN_VERSION=bookworm-slim
    image: email-intelligence:production
    container_name: email-backend-prod
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      # Application
      - PRODUCTION_MODE=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PORT=8000
      - WORKERS=${WORKERS:-4}
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-1000}
      
      # Database connections
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-emailpass123}@mongodb:27017/${MONGODB_DATABASE:-emaildb}
      - DATABASE_PATH=/app/data/email_intelligence_production.db
      
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL_CLASSIFIER=${OPENAI_MODEL_CLASSIFIER:-gpt-5-nano-2025-08-07}
      - OPENAI_MODEL_DRAFT=${OPENAI_MODEL_DRAFT:-gpt-5-mini-2025-08-07}
      
      # Real-time features
      - WS_MAX_CONNECTIONS=${WS_MAX_CONNECTIONS:-500}
      - ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
      - MONITOR_CHECK_INTERVAL=${MONITOR_CHECK_INTERVAL:-30}
      
      # Performance tuning
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-3600}
      - EMAIL_BATCH_SIZE=${EMAIL_BATCH_SIZE:-50}
      
    volumes:
      # Application data
      - app-data:/app/data
      - app-logs:/app/logs
      - app-backups:/app/backups
      
      # Apple Mail access (macOS host)
      - /Users/${USER}/Library/Mail:/mail_data:ro
      
      # Configuration
      - ./config/production_config.py:/app/production_config.py:ro
      - ./.env.production:/app/.env.production:ro
      
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
        
    networks:
      - email-network-prod
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
          
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Real-time Analytics Service
  email-analytics:
    build:
      context: .
      dockerfile: docker/Dockerfile.analytics
    image: email-analytics:production
    container_name: email-analytics-prod
    restart: unless-stopped
    ports:
      - "${ANALYTICS_PORT:-8001}:8001"
    environment:
      - PRODUCTION_MODE=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/1
      - BACKEND_URL=http://email-backend:8000
      - ANALYTICS_UPDATE_INTERVAL=${ANALYTICS_UPDATE_INTERVAL:-5.0}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
    volumes:
      - app-analytics:/app/analytics_data
      - app-logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      email-backend:
        condition: service_healthy
    networks:
      - email-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Email Monitor Service
  email-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.monitor
    image: email-monitor:production
    container_name: email-monitor-prod
    restart: unless-stopped
    environment:
      - PRODUCTION_MODE=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BACKEND_URL=http://email-backend:8000
      - MONITOR_CHECK_INTERVAL=${MONITOR_CHECK_INTERVAL:-30}
      - MONITOR_URGENT_CHECK_INTERVAL=${MONITOR_URGENT_CHECK_INTERVAL:-10}
    volumes:
      - /Users/${USER}/Library/Mail:/mail_data:ro
      - app-logs:/app/logs
    depends_on:
      email-backend:
        condition: service_healthy
    networks:
      - email-network-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ============================================================================
  # FRONTEND SERVICES
  # ============================================================================
  
  # React Dashboard (Production Build)
  email-dashboard:
    build:
      context: ./dashboard/frontend
      dockerfile: Dockerfile.production
      args:
        - NODE_VERSION=18-alpine
        - REACT_APP_API_URL=http://localhost:${PORT:-8000}
        - REACT_APP_WS_URL=ws://localhost:${PORT:-8000}
        - REACT_APP_ANALYTICS_URL=http://localhost:${ANALYTICS_PORT:-8001}
    image: email-dashboard:production
    container_name: email-dashboard-prod
    restart: unless-stopped
    ports:
      - "${UI_PORT:-3000}:80"
    environment:
      - NODE_ENV=production
    networks:
      - email-network-prod
    depends_on:
      email-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # ============================================================================
  # MONITORING AND OBSERVABILITY
  # ============================================================================
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: email-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - email-network-prod
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: email-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=redis-datasource,mongodb-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - email-network-prod
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: email-loki-prod
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - email-network-prod
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  # Infrastructure data
  redis-prod-data:
    driver: local
  mongo-prod-data:
    driver: local
  
  # Application data
  app-data:
    driver: local
  app-logs:
    driver: local
  app-backups:
    driver: local
  app-analytics:
    driver: local
  
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  email-network-prod:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500